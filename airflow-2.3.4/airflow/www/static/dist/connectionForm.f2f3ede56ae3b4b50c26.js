/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Airflow"] = factory();
	else
		root["Airflow"] = root["Airflow"] || {}, root["Airflow"]["connectionForm"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/connection_form.js":
/*!**************************************!*\
  !*** ./static/js/connection_form.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./static/js/utils.js\");\n/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/**\n * Created by janomar on 23/07/15.\n */\n\n/* global document, DOMParser, $ */\n\nconst restApiEnabled = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getMetaValue)('rest_api_enabled') === 'True';\nconst connectionTestUrl = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getMetaValue)('test_url');\n\nfunction decode(str) {\n  return new DOMParser().parseFromString(str, 'text/html').documentElement.textContent;\n}\n/**\n * Returns a map of connection type to its controls.\n */\n\n\nfunction getConnTypesToControlsMap() {\n  const connTypesToControlsMap = new Map();\n  const extraFormControls = Array.from(document.querySelectorAll(\"[id^='extra__'\"));\n  extraFormControls.forEach(control => {\n    const connTypeEnd = control.id.indexOf('__', 'extra__'.length);\n    const connType = control.id.substring('extra__'.length, connTypeEnd);\n    const controls = connTypesToControlsMap.has(connType) ? connTypesToControlsMap.get(connType) : [];\n    controls.push(control.parentElement.parentElement);\n    connTypesToControlsMap.set(connType, controls);\n  });\n  return connTypesToControlsMap;\n}\n/**\n * Returns the DOM element that contains the different controls.\n */\n\n\nfunction getControlsContainer() {\n  return document.getElementById('conn_id').parentElement.parentElement.parentElement;\n}\n/**\n   * Restores the behaviour for all fields. Used to restore fields to a\n   * well-known state during the change of connection types.\n   */\n\n\nfunction restoreFieldBehaviours() {\n  Array.from(document.querySelectorAll('label[data-orig-text]')).forEach(elem => {\n    elem.innerText = elem.dataset.origText;\n    delete elem.dataset.origText;\n  });\n  Array.from(document.querySelectorAll('.form-control')).forEach(elem => {\n    elem.placeholder = '';\n    elem.parentElement.parentElement.classList.remove('hide');\n  });\n}\n/**\n   * Applies special behaviour for fields. The behaviour is defined through\n   * config, passed by the server.\n   *\n   * @param {string} connection The connection object to apply to.\n   */\n\n\nfunction applyFieldBehaviours(connection) {\n  if (connection) {\n    if (Array.isArray(connection.hidden_fields)) {\n      connection.hidden_fields.forEach(field => {\n        document.getElementById(field).parentElement.parentElement.classList.add('hide');\n      });\n    }\n\n    if (connection.relabeling) {\n      Object.keys(connection.relabeling).forEach(field => {\n        const label = document.querySelector(`label[for='${field}']`);\n        label.dataset.origText = label.innerText;\n        label.innerText = connection.relabeling[field];\n      });\n    }\n\n    if (connection.placeholders) {\n      Object.keys(connection.placeholders).forEach(field => {\n        const placeholder = connection.placeholders[field];\n        document.getElementById(field).placeholder = placeholder;\n      });\n    }\n  }\n}\n/**\n * Dynamically enable/disable the Test Connection button as determined by the selected\n * connection type.\n @param {string} connectionType The connection type to change to.\n @param {Array} testableConnections Connection types that currently support testing via\n  Airflow REST API.\n */\n\n\nfunction handleTestConnection(connectionType, testableConnections) {\n  const testButton = document.getElementById('test-connection');\n  const testConnEnabled = testableConnections.includes(connectionType);\n\n  if (testConnEnabled) {\n    // If connection type can be tested in via REST API, enable button and clear toolip.\n    $(testButton).prop('disabled', false).removeAttr('title');\n  } else {\n    // If connection type can NOT be tested via REST API, disable button and display toolip\n    // alerting the user.\n    $(testButton).prop('disabled', true).attr('title', 'This connection type does not currently support testing via ' + 'Airflow REST API.');\n  }\n}\n\n$(document).ready(() => {\n  const fieldBehavioursElem = document.getElementById('field_behaviours');\n  const config = JSON.parse(decode(fieldBehavioursElem.textContent));\n  const testableConnsElem = document.getElementById('testable_connection_types');\n  const testableConns = decode(testableConnsElem.textContent); // Prevent login/password fields from triggering browser auth extensions\n\n  const form = document.getElementById('model_form');\n  if (form) form.setAttribute('autocomplete', 'off'); // Save all DOM elements into a map on load.\n\n  const controlsContainer = getControlsContainer();\n  const connTypesToControlsMap = getConnTypesToControlsMap(); // Create a test connection button & insert it right next to the save (submit) button\n\n  const testConnBtn = $('<button id=\"test-connection\" type=\"button\" class=\"btn btn-sm btn-primary\" ' + 'style=\"margin-left: 3px; pointer-events: all\">Test\\n <i class=\"fa fa-rocket\"></i></button>'); // Disable the Test Connection button if Airflow REST APIs are not enabled.\n\n  if (!restApiEnabled) {\n    $(testConnBtn).prop('disabled', true).attr('title', 'Airflow REST APIs have been disabled. ' + 'See api->auth_backends section of the Airflow configuration.');\n  }\n\n  $(testConnBtn).insertAfter($('form#model_form div.well.well-sm button:submit'));\n  /**\n   * Changes the connection type.\n   * @param {string} connType The connection type to change to.\n   */\n\n  function changeConnType(connType) {\n    Array.from(connTypesToControlsMap.values()).forEach(controls => {\n      controls.filter(control => control.parentElement === controlsContainer).forEach(control => controlsContainer.removeChild(control));\n    });\n    const controls = connTypesToControlsMap.get(connType) || [];\n    controls.forEach(control => controlsContainer.appendChild(control)); // Restore field behaviours.\n\n    restoreFieldBehaviours(); // Apply behaviours to fields.\n\n    applyFieldBehaviours(config[connType]); // Enable/Disable the Test Connection button. Only applicable if Airflow REST APIs are enabled.\n\n    if (restApiEnabled) {\n      handleTestConnection(connType, testableConns);\n    }\n  }\n  /**\n   * Displays the Flask style alert on UI via JS\n   *\n   * @param {boolean} status - true for success, false for error\n   * @param {string} message - The text message to show in alert box\n   */\n\n\n  function displayAlert(status, message) {\n    const alertClass = status ? 'alert-success' : 'alert-error';\n    let alertBox = $('.container .row .alert');\n\n    if (alertBox.length) {\n      alertBox.removeClass('alert-success').removeClass('alert-error');\n      alertBox.addClass(alertClass);\n      alertBox.text(message);\n      alertBox.show();\n    } else {\n      alertBox = $(`<div class=\"alert ${alertClass}\">\\n` + `<button type=\"button\" class=\"close\" data-dismiss=\"alert\">Ã—</button>\\n${message}</div>`);\n      $('.container .row').prepend(alertBox).show();\n    }\n  }\n  /**\n   * Produces JSON stringified data from a html form data\n   *\n   * @param {string} selector Jquery from selector string.\n   * @returns {string} Form data as a JSON string\n   */\n\n\n  function getSerializedFormData(selector) {\n    const outObj = {};\n    const extrasObj = {};\n    const inArray = $(selector).serializeArray();\n    /*\n    Form data fields are processed in the below order:\n        - csrf_token\n        - conn_id\n        - conn_type\n        - description\n        - host\n        - schema\n        - login\n        - password\n        - port\n        - extra\n        - All other custom form fields (i.e. fields that are named ``extra__...``) in\n          alphabetical order\n    */\n\n    $.each(inArray, function () {\n      if (this.name === 'conn_id') {\n        outObj.connection_id = this.value;\n      } else if (this.value !== '' && this.name === 'port') {\n        outObj[this.name] = Number(this.value);\n      } else if (this.value !== '' && this.name !== 'csrf_token') {\n        // Check if there are values in the classic Extra form field. These values come in\n        // stringified and need to be converted to a JSON object in case there are custom form\n        // field values that also need to be included in the ``extra`` object for the output\n        // payload.\n        if (this.name === 'extra') {\n          let extra;\n\n          try {\n            extra = JSON.parse(this.value);\n          } catch (e) {\n            if (e instanceof SyntaxError) {\n              displayAlert(false, 'Extra field value is not valid JSON.');\n            }\n\n            throw e;\n          }\n\n          Object.entries(extra).forEach(([key, val]) => {\n            extrasObj[key] = val;\n          }); // Check if field is a custom form field.\n        } else if (this.name.startsWith('extra__')) {\n          // prior to Airflow 2.3 custom fields were stored in the extra dict with prefix\n          // post-2.3 we allow to use with no prefix\n          // here we don't know which we are configured to use, so we populate both\n          extrasObj[this.name] = this.value;\n          extrasObj[this.name.replace(/extra__.+?__/, '')] = this.value;\n        } else {\n          outObj[this.name] = this.value;\n        }\n      }\n    }); // Stringify all extras for the AJAX call payload.\n\n    outObj.extra = JSON.stringify(extrasObj);\n    return JSON.stringify(outObj);\n  } // Bind click event to Test Connection button & perform an AJAX call via REST API\n\n\n  $('#test-connection').on('click', e => {\n    e.preventDefault();\n    $.ajax({\n      url: connectionTestUrl,\n      type: 'post',\n      contentType: 'application/json',\n      dataType: 'json',\n      data: getSerializedFormData('form#model_form'),\n\n      success(data) {\n        displayAlert(data.status, data.message);\n      },\n\n      error(jq, err, msg) {\n        displayAlert(false, msg);\n      }\n\n    });\n  });\n  const connTypeElem = document.getElementById('conn_type');\n  $(connTypeElem).on('change', e => {\n    const connType = e.target.value;\n    changeConnType(connType);\n  }); // Initialize the form by setting a connection type.\n\n  changeConnType(connTypeElem.value);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./static/js/connection_form.js\n");

/***/ }),

/***/ "./static/js/utils.js":
/*!****************************!*\
  !*** ./static/js/utils.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"appendSearchParams\": () => (/* binding */ appendSearchParams),\n/* harmony export */   \"finalStatesMap\": () => (/* binding */ finalStatesMap),\n/* harmony export */   \"getMetaValue\": () => (/* binding */ getMetaValue)\n/* harmony export */ });\n/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* global document */\nfunction getMetaValue(name) {\n  const elem = document.querySelector(`meta[name=\"${name}\"]`);\n\n  if (!elem) {\n    return null;\n  }\n\n  return elem.getAttribute('content');\n}\nconst finalStatesMap = () => new Map([['success', 0], ['failed', 0], ['upstream_failed', 0], ['up_for_retry', 0], ['up_for_reschedule', 0], ['running', 0], ['deferred', 0], ['sensing', 0], ['queued', 0], ['scheduled', 0], ['skipped', 0], ['no_status', 0]]);\nconst appendSearchParams = (url, params) => {\n  const separator = url.includes('?') ? '&' : '?';\n  return `${url}${separator}${params}`;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zdGF0aWMvanMvdXRpbHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9BaXJmbG93Ly4vc3RhdGljL2pzL3V0aWxzLmpzP2Q2OGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBnbG9iYWwgZG9jdW1lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRhVmFsdWUobmFtZSkge1xuICBjb25zdCBlbGVtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgbWV0YVtuYW1lPVwiJHtuYW1lfVwiXWApO1xuXG4gIGlmICghZWxlbSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCdjb250ZW50Jyk7XG59XG5leHBvcnQgY29uc3QgZmluYWxTdGF0ZXNNYXAgPSAoKSA9PiBuZXcgTWFwKFtbJ3N1Y2Nlc3MnLCAwXSwgWydmYWlsZWQnLCAwXSwgWyd1cHN0cmVhbV9mYWlsZWQnLCAwXSwgWyd1cF9mb3JfcmV0cnknLCAwXSwgWyd1cF9mb3JfcmVzY2hlZHVsZScsIDBdLCBbJ3J1bm5pbmcnLCAwXSwgWydkZWZlcnJlZCcsIDBdLCBbJ3NlbnNpbmcnLCAwXSwgWydxdWV1ZWQnLCAwXSwgWydzY2hlZHVsZWQnLCAwXSwgWydza2lwcGVkJywgMF0sIFsnbm9fc3RhdHVzJywgMF1dKTtcbmV4cG9ydCBjb25zdCBhcHBlbmRTZWFyY2hQYXJhbXMgPSAodXJsLCBwYXJhbXMpID0+IHtcbiAgY29uc3Qgc2VwYXJhdG9yID0gdXJsLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPyc7XG4gIHJldHVybiBgJHt1cmx9JHtzZXBhcmF0b3J9JHtwYXJhbXN9YDtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./static/js/utils.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./static/js/connection_form.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});